/*
===================================================================================================
SILVER LAYER LOADING
===================================================================================================

Script Purpose: 
	Extracts bronze schema tables 
	Cleans and transforms data
	Loads data to silver schema tables

Data Cleaning: 
  Remove Duplicates 
  Data Filtering
  Handling Missing Data
  Handling Invalid Data
  Handling Unwanted Spaces
  Data Type Casting
  Outlier Detection

Data Transformations:
  Data Enrichment
  Derived Columns
  Data Normalization and Standardization

Execution: EXEC silver.load_silver
*/
USE DataWarehouse;
GO

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
	DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
	BEGIN TRY
		PRINT '======================================================================================';
		PRINT 'Loading Silver Layer';
		PRINT '======================================================================================';
		PRINT '';

		SET @batch_start_time = GETDATE();

		PRINT '--------------------------------------------------------------------------------------';
		PRINT 'Loading CRM Tables';
		PRINT '--------------------------------------------------------------------------------------';

		-- Table: crm_cust_info
		SET @start_time = GETDATE();
		PRINT 'Truncating table silver.crm_cust_info';
		TRUNCATE TABLE silver.crm_cust_info;
		PRINT 'Loading table silver.crm_cust_info';
		INSERT INTO silver.crm_cust_info WITH (TABLOCK) (
			cst_id, 
			cst_key, 
			cst_firstname, 
			cst_lastname, 
			cst_marital_status, 
			cst_gndr, 
			cst_create_date
		) 
			select 
			cst_id, 
			cst_key, 
			TRIM(cst_firstname) as cst_firstname,	-- trimmed whitespace
			TRIM(cst_lastname) as cst_lastname,		-- trimmed whitespace
			CASE UPPER(cst_marital_status)			-- Converted acronyms to full forms
				WHEN 'M' THEN 'Married'
				WHEN 'F' THEN 'Female'
				ELSE 'n/a'							-- Handling null values
			END as cst_marital_status,
			CASE UPPER(cst_gndr)					-- Converted acronyms to full forms
				WHEN 'F' then 'Female'
				WHEN 'M' then 'Male'
				ELSE 'n/a'							-- Handling null values
			END as cst_gndr, 
			cst_create_date
			FROM (
			select *, ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_number  
			from bronze.crm_cust_info
			WHERE cst_id IS NOT NULL
			) as t
			where t.row_number = 1;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
		PRINT '-----------------------------------';

		/*
		Table: crm_prd_info
		Cleaning:
			prd_cat, prd_key: split and extract product category from original prd_key
			prd_cost: replace null values with a 0
			prd_line: Change abbreviations to full form
			prd_start_dt: cast from datetime to date 
			prd_end_dt: 
				Take the lead of a given original start date w.r.t the prd_key and subtract 1 day
				cast from datetime to date
		*/
		SET @start_time = GETDATE();
		PRINT 'Truncating table silver.crm_prd_info';
		TRUNCATE TABLE silver.crm_prd_info;
		PRINT 'Loading table silver.crm_prd_info';
		INSERT INTO silver.crm_prd_info with (TABLOCK) (
			prd_id, prd_cat, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt
		)
		select	prd_id, 
				REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS prd_cat,
				SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
				prd_nm, 
				ISNULL(prd_cost, 0) as prd_cost, 
				CASE UPPER(TRIM(prd_line))
					WHEN 'M' THEN 'Mountain'
					WHEN 'R' THEN 'Road'
					WHEN 'S' THEN 'Other Sales'
					WHEN 'T' THEN 'Touring'
					ELSE 'n/a'
				END as prd_line, 
				CAST(prd_start_dt AS DATE) as prd_start_dt, 
				CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) as prd_end_dt
		from bronze.crm_prd_info;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
		PRINT '-----------------------------------';

		-- crm_sales_details
		SET @start_time = GETDATE();
		PRINT 'Truncating table silver.crm_sales_details';
		TRUNCATE TABLE silver.crm_sales_details;
		PRINT 'Loading table silver.crm_sales_details';
		INSERT INTO silver.crm_sales_details (
			sls_ord_num, sls_prd_key, sls_cust_id, sls_order_dt, sls_ship_dt, sls_due_dt, sls_sales, sls_quantity, sls_price
		)
		(select 
			sls_ord_num, sls_prd_key, sls_cust_id, 
			case													
				when sls_order_dt = 0 OR LEN(sls_order_dt) != 8 then NULL		-- date is NULL if invalid
				else CAST(CAST (sls_order_dt as VARCHAR) AS DATE)				-- convert int to date
			END AS sls_order_dt, 
			case
				when sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 then NULL			-- date is NULL if invalid
				else CAST(CAST (sls_ship_dt as VARCHAR) AS DATE)				-- convert int to date
			END AS sls_ship_dt, 
			case
				when sls_due_dt = 0 OR LEN(sls_due_dt) != 8 then NULL			-- date is NULL if invalid
				else CAST(CAST (sls_due_dt as VARCHAR) AS DATE)					-- convert int to date
			END AS sls_due_dt, 
			-- check if sales = item price * quantity
			-- check if sales are <= 0 or NULL
			-- Use absolute value for price in case it is null
			CASE
				WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
					THEN sls_quantity * ABS(sls_price)
				ELSE sls_sales
			END AS sls_sales, 
			sls_quantity, 
			-- check if item price = sales / quantity
			-- check if item price <= 0 or NULL
			-- convert to NULL if quantity = 0
			CASE
				WHEN sls_price is NULL OR sls_price <= 0
					THEN sls_sales / NULLIF(sls_quantity, 0)
				ELSE sls_price
			END AS sls_price
		FROM bronze.crm_sales_details);
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
		PRINT '-----------------------------------';

		PRINT '';
		PRINT '--------------------------------------------------------------------------------------';
		PRINT 'Loading ERP Tables';
		PRINT '--------------------------------------------------------------------------------------';
		PRINT '';

		-- erp_cust_az12
		SET @start_time = GETDATE();
		PRINT 'Truncating table silver.erp_cust_az12';
		TRUNCATE TABLE silver.erp_cust_az12;
		PRINT 'Loading table silver.erp_cust_az12';
		INSERT INTO silver.erp_cust_az12 (CID, BDATE, GEN)
		select 
			CASE WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID, 4, LEN(CID))
				ELSE CID
			END AS CID, 
			CASE WHEN BDATE > GETDATE() THEN NULL
				ELSE BDATE
			END AS BDATE, 
			CASE 
				WHEN UPPER(TRIM(GEN)) IN ('F', 'FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(GEN)) IN ('M', 'MALE') THEN 'Male'
				ELSE 'n/a'
			END AS GEN
		from bronze.erp_cust_az12;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
		PRINT '-----------------------------------';

		-- erp_loc_a101
		SET @start_time = GETDATE();
		PRINT 'Truncating table silver.erp_loc_a101';
		TRUNCATE TABLE silver.erp_loc_a101;
		PRINT 'Loading table silver.erp_loc_a101';
		INSERT INTO silver.erp_loc_a101 (cid, cntry)
		select REPLACE(CID, '-', '') as CID, 
			case 
				WHEN upper(trim(CNTRY)) IN ('DE', 'GERMANY') THEN 'Germany'
				WHEN upper(trim(CNTRY)) IN  ('US', 'USA', 'UNITED STATES') THEN 'United States'
				WHEN TRIM(CNTRY) IN (NULL, '') THEN 'n/a'
				ELSE CNTRY
			end as cntry
		from bronze.erp_loc_a101;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
		PRINT '-----------------------------------';

		-- erp_px_cat_g1v2
		SET @start_time = GETDATE();
		PRINT 'Truncating table silver.erp_px_cat_g1v2';
		TRUNCATE TABLE silver.erp_px_cat_g1v2;
		PRINT 'Loading table silver.erp_px_cat_g1v2';
		INSERT INTO silver.erp_px_cat_g1v2 (id, cat, subcat, maintenance)
		select * from bronze.erp_px_cat_g1v2;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
		PRINT '-----------------------------------';

		SET @batch_end_time = GETDATE();
		PRINT '';
		PRINT '>> Batch Load Duration: ' + CAST(DATEDIFF(second, @batch_start_time, @batch_end_time) AS NVARCHAR) + ' seconds';
	END TRY
	BEGIN CATCH
		PRINT '======================================================================================';
		PRINT 'Error Loading Silver Layer';
		PRINT '======================================================================================';
		PRINT 'ERROR NUMBER: ' + CAST(ERROR_NUMBER() AS NVARCHAR);
		PRINT 'ERROR MESSAGE: ' + ERROR_MESSAGE();
		PRINT 'ERROR STATE: ' + CAST(ERROR_STATE() AS NVARCHAR);
	END CATCH
END
